#
#  Copyright (C) 2011
#  University of Rochester Department of Computer Science
#    and
#  Lehigh University Department of Computer Science and Engineering
# 
# License: Modified BSD
#          Please see the file LICENSE.RSTM for licensing information

# Source folder names
BDIR   = bench
LDIR   = libstm
LADIR  = $(LDIR)/algs/
LPDIR  = $(LDIR)/policies/

# Output folder names
ODIR = ./obj.dir
BODIR = $(ODIR)/$(BDIR).dir
LODIR = $(ODIR)/$(LDIR).dir
CONFDIR = $(ODIR)/stm

# Base names of files that we expect in each of the source folders
BNAMES  = CounterBench DisjointBench DListBench ForestBench HashBench      \
          ListBench MCASBench ReadNWrite1Bench ReadWriteNBench TreeBench   \
          TreeOverwriteBench TypeTest WWPathologyBench
LNAMES  = inst irrevocability profiling txthread types WBMMPolicy
LANAMES = algs biteager biteagerredo bitlazy byear byeau byteeager         \
          byteeagerredo bytelazy cgl ctoken ctokenturbo llt mcs nano norec \
          norecprio oreau orecala oreceager oreceagerredo orecela orecfair \
          oreclazy pipeline profileapp profiletm ringala ringsw serial     \
          swiss ticket tli tml tmllazy
LPNAMES = cbr policies static

# Names of important tools.  These may be hard-coded for Lehigh for now
CXX = /apps/suncc-s2-`uname -p`/bin/CC
AR  = ar

# Flags.  Note that CXXTMFLAGS is only for the bench/ folder
CXXFLAGS    = -mt +w -xMMD -xO5 -g0 -xarch=sse2
CXXFLAGS   += -features=zla -template=no%extdef
CXXFLAGS   += -m32 -I./$(ODIR) -I./include -I.
LDFLAGS    += -lrt -lpthread -m32 -lmtmalloc -L./$(LODIR) -lrstm
CXXTMFLAGS  = -Qoption CC -tm_mode=stm 

# Transformations of filenames into what Make cares about
LSOURCES = $(patsubst %, $(LDIR)/%.cpp,  $(LNAMES))  \
           $(patsubst %, $(LADIR)/%.cpp, $(LANAMES)) \
           $(patsubst %, $(LPDIR)/%.cpp, $(LPNAMES))
LOFILES  = $(patsubst %, $(LODIR)/%.o, $(LNAMES) $(LANAMES) $(LPNAMES))
LDEPS    = $(patsubst %, $(LODIR)/%.d, $(LNAMES) $(LANAMES) $(LPNAMES))
BSOURCES = $(patsubst %, $(BDIR)/%.cpp,  $(BNAMES))
BOFILES  = $(patsubst %, $(BODIR)/%, $(BNAMES))
BDEPS    = $(patsubst %, $(BODIR)/*.d, $(BNAMES))
CONFIG   = $(CONFDIR)/config.h
LIB      = $(LODIR)/librstm.a

# build rules
.PHONY: all clean info
.PRECIOUS: $(BODIR) $(LODIR) $(CONFDIR) $(ODIR)
all: info $(CONFIG) $(LIB) $(BOFILES) 
	@echo "Build complete"

# to keep the build lines comprehensible, we hide the actual CXX invocations.
# Printing this information first helps if we need to recreate the invocation
# manually
info:
	@echo "Build Configuration:"
	@echo "  CXXFLAGS   = ${CXXFLAGS}"
	@echo "  CXXTMFLAGS = ${CXXTMFLAGS}"
	@echo "  LDFLAGS    = ${LDFLAGS}"
	@echo "  CXX        = ${CXX}"

# RSTM does out-of-source builds, and expects cmake to produce a config.h in
# the out-of-source include/stm folder.  We avoid having to write to source
# folders by using this hack instead
$(CONFIG):
	@mkdir -p $(CONFDIR)
	@echo "#define STM_BITS_32" > $@
	@echo "#define STM_OPT_O3" >> $@
	@echo "#define STM_OS_SOLARIS" >> $@
	@echo "#define STM_CC_SUN" >> $@
	@echo "#define STM_CPU_X86" >> $@
	@echo "#define STM_WS_BYTELOG" >> $@
	@echo "#define STM_PROFILETMTRIGGER_ALL" >> $@
	@echo "#define SINGLE_SOURCE_BUILD" >> $@
	@echo "$@ Complete"

# We'll be lazy and clean by colbbering the entire build folder
clean:
	@rm -rf $(ODIR)
	@echo "Finished building target $@"

# rule for making directories for output files
%.dir:
	@mkdir -p $@

# since there are 3 folders with library source files, we need 3 rules to
# build all the .o files
$(LODIR)/%.o: $(LDIR)/%.cpp $(LODIR) $(CONFIG)
	@echo [CXX] $< "-->" $@
	@$(CXX) $(CXXFLAGS) -o $@ -c $<
$(LODIR)/%.o: $(LADIR)/%.cpp $(LODIR) $(CONFIG)
	@echo [CXX] $< "-->" $@
	@$(CXX) $(CXXFLAGS) -o $@ -c $<
$(LODIR)/%.o: $(LPDIR)/%.cpp $(LODIR) $(CONFIG)
	@echo [CXX] $< "-->" $@
	@$(CXX) $(CXXFLAGS) -o $@ -c $<

# Rule to build the .a from the library .o files
$(LIB): $(LOFILES)
	@echo "[ar] $(LODIR)*.o --> $@"
	@$(AR) cru $@ $^

# Building the executables is easy since we have single-source build enabled
$(BODIR)/%: $(BDIR)/%.cpp $(BODIR) $(CONFIG) $(LIB)
	@echo [CXX] $< "-->" $@
	@$(CXX) $(CXXFLAGS) -o $@ $< $(LDFLAGS)

-include $(LDEPS) $(BDEPS)
